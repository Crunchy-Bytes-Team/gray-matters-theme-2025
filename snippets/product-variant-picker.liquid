{% comment %}
  Renders product variant-picker

  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} Id of the product form to which the variant picker is associated.
  Usage:
  {% render 'product-variant-picker', product: product, block: block, product_form_id: product_form_id %}
{% endcomment %}
{%- unless product.has_only_default_variant -%}
  <variant-selects
    id='variant-selects-{{ section.id }}'
    data-section='{{ section.id }}'
    {{ block.shopify_attributes }}
  >
    {%- for option in product.options_with_values -%}
      {%- liquid
        assign swatch_count = option.values | map: 'swatch' | compact | size
        assign picker_type = block.settings.picker_type

        if swatch_count > 0 and block.settings.swatch_shape != 'none'
          if block.settings.picker_type == 'dropdown'
            assign picker_type = 'swatch_dropdown'
          else
            assign picker_type = 'swatch'
          endif
        endif
      -%}
      {%- if picker_type == 'swatch' -%}
        <fieldset class='js product-form__input product-form__input--swatch'>
          <legend class='form__label'>
            {{ option.name }}:
            <span data-selected-value>
              {{- option.selected_value -}}
            </span>
          </legend>
          {% render 'product-variant-options',
            product: product,
            option: option,
            block: block,
            picker_type: picker_type
          %}
        </fieldset>
      {%- elsif picker_type == 'button' -%}
        <fieldset class='js product-form__input product-form__input--pill'>
          <legend class='form__label'>{{ option.name }}</legend>
          {% render 'product-variant-options',
            product: product,
            option: option,
            block: block,
            picker_type: picker_type
          %}
        </fieldset>
      {%- else -%}
        <div class='product-form__input product-form__input--dropdown'>
          <label class='form__label' for='Option-{{ section.id }}-{{ forloop.index0 }}'>{{ option.name }}</label>
          <div class='select'>
            {%- if picker_type == 'swatch_dropdown' -%}
              <span
                data-selected-value
                class='dropdown-swatch'
              >
                {% render 'swatch', swatch: option.selected_value.swatch, shape: block.settings.swatch_shape %}
              </span>
            {%- endif -%}
            <select
              id='Option-{{ section.id }}-{{ forloop.index0 }}'
              class='select__select'
              name='options[{{ option.name | escape }}]'
              form='{{ product_form_id }}'
            >
              {% render 'product-variant-options',
                product: product,
                option: option,
                block: block,
                picker_type: picker_type
              %}
            </select>
            <span class='svg-wrapper'>
              {{- 'icon-caret.svg' | inline_asset_content -}}
            </span>
          </div>
        </div>
      {%- endif -%}
    {%- endfor -%}

    <script type='application/json' data-selected-variant>
      {{ product.selected_or_first_available_variant | json }}
    </script>
    <script>
      (function() {
        var root = document.getElementById('variant-selects-{{ section.id }}');
        if (!root) return;
        var form = document.getElementById('{{ product_form_id }}');
        if (!form) return;

        // Ensure hidden variant input exists
        var idInput = form.querySelector('input[name="id"]');
        if (!idInput) {
          idInput = document.createElement('input');
          idInput.type = 'hidden';
          idInput.name = 'id';
          idInput.value = '{{ product.selected_or_first_available_variant.id }}';
          form.appendChild(idInput);
        }

        var variants = {{ product.variants | json }};

        function currentOptions() {
          var selects = root.querySelectorAll('select[name^="options["]');
          return Array.prototype.map.call(selects, function(s) { return s.value; });
        }

        function findVariantByOptions(options) {
          for (var i = 0; i < variants.length; i++) {
            var v = variants[i];
            var match = true;
            for (var j = 0; j < v.options.length; j++) {
              if (String(v.options[j]) !== String(options[j])) { match = false; break; }
            }
            if (match) return v;
          }
          return null;
        }

        root.addEventListener('change', function(e) {
          if (e.target && e.target.matches('select[name^="options["]')) {
            var opts = currentOptions();
            var variant = findVariantByOptions(opts);
            if (variant) {
              idInput.value = variant.id;
              // Toggle disabled state for sold-out variants if needed
              var addToCart = form.querySelector('[type="submit"]');
              if (addToCart) {
                if (variant.available) {
                  addToCart.removeAttribute('disabled');
                } else {
                  addToCart.setAttribute('disabled', 'disabled');
                }
              }
            }
          }
        });
      })();
    </script>
  </variant-selects>
{%- endunless -%}
